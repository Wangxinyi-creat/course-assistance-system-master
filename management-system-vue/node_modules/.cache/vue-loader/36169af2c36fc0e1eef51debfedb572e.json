{"remainingRequest":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a-project\\course-assistance-system-master\\management-system-vue\\src\\layout\\navBars\\topBar\\setings.vue?vue&type=template&id=3a4e6caa&scoped=true&","dependencies":[{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\src\\layout\\navBars\\topBar\\setings.vue","mtime":1713709431000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}