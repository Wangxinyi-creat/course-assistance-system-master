{"remainingRequest":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a-project\\course-assistance-system-master\\management-system-vue\\src\\layout\\navBars\\tagsView\\tagsView.vue?vue&type=style&index=0&id=ca8dfad2&scoped=true&lang=scss&","dependencies":[{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\src\\layout\\navBars\\tagsView\\tagsView.vue","mtime":1713709431000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\a-project\\course-assistance-system-master\\management-system-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxheW91dC1uYXZiYXJzLXRhZ3N2aWV3IHsKICBmbGV4OiAxOwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByZXYtYmctd2hpdGUpOwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1wcmV2LWJvcmRlci1jb2xvci1saWdodGVyKTsKCiAgJiA6OnYtZGVlcCAuaXMtdmVydGljYWwgewogICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OwogIH0KCiAgJi11bCB7CiAgICBsaXN0LXN0eWxlOiBub25lOwogICAgbWFyZ2luOiAwOwogICAgcGFkZGluZzogMDsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAzNHB4OwogICAgZGlzcGxheTogZmxleDsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgY29sb3I6IHZhcigtLXByZXYtY29sb3ItdGV4dC1yZWd1bGFyKTsKICAgIGZvbnQtc2l6ZTogMTJweDsKICAgIHBhZGRpbmc6IDAgMTVweDsKCiAgICAmLWxpIHsKICAgICAgaGVpZ2h0OiAyNnB4OwogICAgICBsaW5lLWhlaWdodDogMjZweDsKICAgICAgZGlzcGxheTogZmxleDsKICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tcHJldi1ib3JkZXItY29sb3ItbGlnaHRlcik7CiAgICAgIHBhZGRpbmc6IDAgMTJweCAwIDE1cHg7CiAgICAgIG1hcmdpbi1yaWdodDogNXB4OwogICAgICBib3JkZXItcmFkaXVzOiAycHg7CiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgei1pbmRleDogMDsKICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGN1YmljLWJlemllcigwLjIsIDEsIDAuMywgMSk7CgogICAgICAmOjpiZWZvcmUgewogICAgICAgIGNvbnRlbnQ6ICcnOwogICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICB0b3A6IDA7CiAgICAgICAgcmlnaHQ6IDA7CiAgICAgICAgYm90dG9tOiAwOwogICAgICAgIGxlZnQ6IDA7CiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tcHJldi1jb2xvci1wcmltYXJ5KTsKICAgICAgICB6LWluZGV4OiAtMTsKICAgICAgICBvcGFjaXR5OiAwOwogICAgICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjcsIDEsIDEpOwogICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzLCBvcGFjaXR5IDAuM3M7CiAgICAgICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIsIDEsIDAuMywgMSk7CiAgICAgIH0KCiAgICAgICY6aG92ZXIgewogICAgICAgIGNvbG9yOiB2YXIoLS1wcmV2LWNvbG9yLXRleHQtd2hpdGUpOwogICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGN1YmljLWJlemllcigwLjIsIDEsIDAuMywgMSk7CiAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKCiAgICAgICAgJjo6YmVmb3JlIHsKICAgICAgICAgIG9wYWNpdHk6IDE7CiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApOwogICAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4OwogICAgICAgIH0KCiAgICAgICAgLmlzLXRhZ3N2aWV3LWljb24gewogICAgICAgICAgY29sb3I6IHZhcigtLXByZXYtY29sb3ItdGV4dC13aGl0ZSk7CiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBjdWJpYy1iZXppZXIoMC4yLCAxLCAwLjMsIDEpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgJi1pY29uZm9udCB7CiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgIGxlZnQ6IC01cHg7CiAgICAgICAgdG9wOiAxcHg7CiAgICAgICAgY29sb3I6IHZhcigtLXByZXYtY29sb3ItdGV4dC13aGl0ZSk7CiAgICAgIH0KCiAgICAgICYtaWNvbiB7CiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwJTsKICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgaGVpZ2h0OiAxNHB4OwogICAgICAgIHdpZHRoOiAxNHB4OwogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICBsaW5lLWhlaWdodDogMTRweDsKICAgICAgICB0b3A6IDFweDsKICAgICAgfQoKICAgICAgLmlzLXRhZ3N2aWV3LWljb24gewogICAgICAgIGNvbG9yOiB2YXIoLS1wcmV2LWNvbG9yLXRleHQtcmVndWxhcik7CiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgY3ViaWMtYmV6aWVyKDAuMiwgMSwgMC4zLCAxKTsKICAgICAgfQogICAgfQoKICAgIC5pcy1hY3RpdmUgewogICAgICBjb2xvcjogdmFyKC0tcHJldi1jb2xvci10ZXh0LXdoaXRlKTsKICAgICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgY3ViaWMtYmV6aWVyKDAuMiwgMSwgMC4zLCAxKTsKICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKCiAgICAgICY6OmJlZm9yZSB7CiAgICAgICAgb3BhY2l0eTogMTsKICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDsKICAgICAgfQogICAgfQogIH0KCiAgJiA6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsKICB9CgogIC8vIC8vIOmjjuagvDIKICAvLyAudGFncy1zdHlsZS10d28gewogIC8vIH0KICAvLyAvLyDpo47moLwzCiAgLy8gLnRhZ3Mtc3R5bGUtdGhyZWUgewogIC8vIH0KICAvLyAvLyDpo47moLw0CiAgLy8gLnRhZ3Mtc3R5bGUtZm91ciB7CiAgLy8gfQp9Cg=="},{"version":3,"sources":["tagsView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8TA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tagsView.vue","sourceRoot":"src/layout/navBars/tagsView","sourcesContent":["<template>\n  <div class=\"layout-navbars-tagsview\">\n    <el-scrollbar ref=\"scrollbarRef\" @wheel.native.prevent=\"onHandleScroll\">\n      <ul class=\"layout-navbars-tagsview-ul\" :class=\"setTagsStyle\" ref=\"tagsUlRef\">\n        <li\n            v-for=\"(v, k) in tagsViewList\"\n            :key=\"k\"\n            class=\"layout-navbars-tagsview-ul-li\"\n            :data-name=\"v.name\"\n            :class=\"{ 'is-active': v.path === tagsRoutePath }\"\n            @contextmenu.prevent=\"onContextmenu(v, $event)\"\n            @click=\"onTagsClick(v, k)\"\n            ref=\"tagsRefs\"\n        >\n          <i class=\"iconfont icon-webicon318 layout-navbars-tagsview-ul-li-iconfont font14\"\n             v-if=\"v.path === tagsRoutePath\"></i>\n          <i\n              class=\"layout-navbars-tagsview-ul-li-iconfont font14 is-tagsview-icon\"\n              :class=\"v.meta.icon\"\n              v-if=\"v.path !== tagsRoutePath && getThemeConfig.isTagsviewIcon\"\n          ></i>\n          <span>{{ v.meta.title }}</span>\n          <i\n              class=\"el-icon-refresh-right layout-navbars-tagsview-ul-li-icon ml5\"\n              v-if=\"v.path === tagsRoutePath\"\n              @click.stop=\"refreshCurrentTagsView(v.path)\"\n          ></i>\n          <i class=\"el-icon-close layout-navbars-tagsview-ul-li-icon ml5\" v-if=\"!v.meta.isAffix\"\n             @click.stop=\"closeCurrentTagsView(v.path)\"></i>\n        </li>\n      </ul>\n    </el-scrollbar>\n    <Contextmenu :dropdown=\"tagsDropdown\" ref=\"tagsContextmenu\" @currentContextmenuClick=\"onCurrentContextmenuClick\"/>\n  </div>\n</template>\n\n<script>\nimport Contextmenu from '@/layout/navBars/tagsView/contextmenu';\nimport {Session} from '@/utils/storage.js';\n\nexport default {\n  name: 'tagsView',\n  components: {Contextmenu},\n  data() {\n    return {\n      userInfo: {},\n      tagsViewList: [],\n      tagsDropdown: {\n        x: '',\n        y: '',\n      },\n      tagsRefsIndex: 0,\n      tagsRoutePath: this.$route.path,\n      tagsViewRoutesList: [],\n    };\n  },\n  computed: {\n    // 获取布局配置信息\n    getThemeConfig() {\n      return this.$store.state.themeConfig.themeConfig;\n    },\n    // 动态设置 tagsView 风格样式\n    setTagsStyle() {\n      return this.$store.state.themeConfig.themeConfig.tagsStyle;\n    },\n  },\n  created() {\n    // 监听非本页面调用 0 刷新当前，1 关闭当前，2 关闭其它，3 关闭全部\n    this.bus.$on('onCurrentContextmenuClick', (data) => {\n      this.onCurrentContextmenuClick(data);\n    });\n    //监听页面   data:路由路径  如/personal ....\n    this.bus.$on('closeCurrentTagsView', (data) => {\n        this.closeCurrentTagsView(data);\n    });\n  },\n  mounted() {\n    this.getTagsViewRoutes();\n  },\n  methods: {\n    // 获取路由信息\n    getRoutesList() {\n      return this.$store.state.routesList.routesList;\n    },\n    // 当前的 tagsView 项点击时\n    onTagsClick(v, k) {\n      this.tagsRoutePath = v.path;\n      this.tagsRefsIndex = k;\n      this.$router.push(v);\n    },\n    // 获取 tagsView 的下标：用于处理 tagsView 点击时的横向滚动\n    getTagsRefsIndex(path) {\n      if (this.tagsViewList.length > 0) {\n        this.tagsRefsIndex = this.tagsViewList.findIndex((item) => item.path === path);\n      }\n    },\n    // 鼠标滚轮滚动\n    onHandleScroll(e) {\n      this.$refs.scrollbarRef.$refs.wrap.scrollLeft += e.wheelDelta / 4;\n    },\n    // tagsView 横向滚动\n    tagsViewmoveToCurrentTag() {\n      this.$nextTick(() => {\n        const tagsRefs = this.$refs.tagsRefs;\n        if (tagsRefs.length <= 0) return false;\n        // 当前 li 元素\n        let liDom = tagsRefs[this.tagsRefsIndex];\n        // 当前 li 元素下标\n        let liIndex = this.tagsRefsIndex;\n        // 当前 ul 下 li 元素总长度\n        let liLength = tagsRefs.length;\n        // 最前 li\n        let liFirst = tagsRefs[0];\n        // 最后 li\n        let liLast = tagsRefs[tagsRefs.length - 1];\n        // 当前滚动条的值\n        let scrollRefs = this.$refs.scrollbarRef.$refs.wrap;\n        // 当前滚动条滚动宽度\n        let scrollS = scrollRefs.scrollWidth;\n        // 当前滚动条偏移宽度\n        let offsetW = scrollRefs.offsetWidth;\n        // 当前滚动条偏移距离\n        let scrollL = scrollRefs.scrollLeft;\n        // 上一个 tags li dom\n        let liPrevTag = tagsRefs[this.tagsRefsIndex - 1];\n        // 下一个 tags li dom\n        let liNextTag = tagsRefs[this.tagsRefsIndex + 1];\n        // 上一个 tags li dom 的偏移距离\n        let beforePrevL = '';\n        // 下一个 tags li dom 的偏移距离\n        let afterNextL = '';\n        if (liDom === liFirst) {\n          // 头部\n          scrollRefs.scrollLeft = 0;\n        } else if (liDom === liLast) {\n          // 尾部\n          scrollRefs.scrollLeft = scrollS - offsetW;\n        } else {\n          // 非头/尾部\n          if (liIndex === 0) beforePrevL = liFirst?.offsetLeft - 5;\n          else beforePrevL = liPrevTag?.offsetLeft - 5;\n          if (liIndex === liLength) afterNextL = liLast?.offsetLeft + liLast.offsetWidth + 5;\n          else afterNextL = liNextTag?.offsetLeft + liNextTag.offsetWidth + 5;\n          if (afterNextL > scrollL + offsetW) {\n            scrollRefs.scrollLeft = afterNextL - offsetW;\n          } else if (beforePrevL < scrollL) {\n            scrollRefs.scrollLeft = beforePrevL;\n          }\n        }\n        // 更新滚动条，防止不出现\n        this.updateScrollbar();\n      });\n    },\n    // 更新滚动条显示\n    updateScrollbar() {\n      this.$refs.scrollbarRef.update();\n    },\n    // 递归查找当前路径下的组件信息\n    filterCurrentMenu(arr, currentPath, callback) {\n      arr.map((item) => {\n        if (item.path === currentPath) {\n          callback(item);\n          return false;\n        }\n        item = Object.assign({}, item);\n        if (item.children) {\n          item.children = this.filterCurrentMenu(item.children, currentPath, callback);\n        }\n      });\n    },\n    // 数组对象去重\n    duplicate(arr) {\n      let newobj = {};\n      arr = arr.reduce((preVal, curVal) => {\n        newobj[curVal.path] ? '' : (newobj[curVal.path] = preVal.push(curVal));\n        return preVal;\n      }, []);\n      return arr;\n    },\n    // 获取 vuex 中的 tagsViewRoutes 列表\n    getTagsViewRoutes() {\n      this.tagsRoutePath = this.$route.path;\n      this.tagsViewList = [];\n      if (!this.$store.state.themeConfig.themeConfig.isCacheTagsView) Session.remove('tagsViewList');\n      this.tagsViewRoutesList = this.$store.state.tagsViewRoutes.tagsViewRoutes;\n      this.initTagsViewList();\n    },\n    // 存储 tagsViewList 到浏览器临时缓存中，页面刷新时，保留记录\n    addBrowserSetSession(tagsViewList) {\n      Session.set('tagsViewList', tagsViewList);\n    },\n    // 初始化设置了 tagsView 数据\n    initTagsViewList() {\n      if (Session.get('tagsViewList') && this.$store.state.themeConfig.themeConfig.isCacheTagsView) {\n        this.tagsViewList = Session.get('tagsViewList');\n      } else {\n        this.tagsViewRoutesList.map((v) => {\n          if (v.meta.isAffix && !v.meta.isHide) this.tagsViewList.push({...v});\n        });\n        this.addTagsView(this.$route.path);\n      }\n      // 初始化当前元素(li)的下标\n      this.getTagsRefsIndex(this.$route.path);\n      // 添加初始化横向滚动条移动到对应位置\n      this.tagsViewmoveToCurrentTag();\n    },\n    // 添加 tagsView：未设置隐藏（isHide）也添加到在 tagsView 中\n    addTagsView(path, to) {\n      if (this.tagsViewList.some((v) => v.path === path)) return false;\n      const item = this.tagsViewRoutesList.find((v) => v.path === path);\n      if (item.meta.isLink && !item.meta.isIframe) return false;\n      item.query = to?.query ? to?.query : this.$route.query;\n      this.tagsViewList.push({...item});\n      this.addBrowserSetSession(this.tagsViewList);\n    },\n    // 右键菜单点击时显示菜单列表\n    onContextmenu(v, e) {\n      let {clientX, clientY} = e;\n      this.tagsDropdown.x = clientX;\n      this.tagsDropdown.y = clientY;\n      this.$refs.tagsContextmenu.openContextmenu(v);\n    },\n    // 当前项右键菜单点击\n    onCurrentContextmenuClick(data) {\n      let {id, path} = data;\n      let currentTag = this.tagsViewList.find((v) => v.path === path);\n      switch (id) {\n        case 0:\n          this.refreshCurrentTagsView(path);\n          this.$router.push({path, query: currentTag.query});\n          break;\n        case 1:\n          this.closeCurrentTagsView(path);\n          break;\n        case 2:\n          this.$router.push({path, query: currentTag.query});\n          this.closeOtherTagsView(path);\n          break;\n        case 3:\n          this.closeAllTagsView(path);\n          break;\n      }\n    },\n    // 1、刷新当前 tagsView：\n    refreshCurrentTagsView(path) {\n      this.bus.$emit('onTagsViewRefreshRouterView', path);\n    },\n    // 2、关闭当前 tagsView：当前项 `tags-view` icon 关闭时点击，如果是设置了固定的（isAffix），不可以关闭\n    closeCurrentTagsView(path) {\n      this.tagsViewList.map((v, k, arr) => {\n        if (!v.meta.isAffix) {\n          if (v.path === path) {\n            this.tagsViewList.splice(k, 1);\n            setTimeout(() => {\n              // 最后一个\n              if (this.tagsViewList.length === k) this.$router.push({\n                path: arr[arr.length - 1].path,\n                query: arr[arr.length - 1].query\n              });\n              // 否则，跳转到下一个\n              else this.$router.push({path: arr[k].path, query: arr[k].query});\n            }, 0);\n          }\n        }\n      });\n      this.addBrowserSetSession(this.tagsViewList);\n    },\n    // 3、关闭其它 tagsView：如果是设置了固定的（isAffix），不进行关闭\n    closeOtherTagsView(path) {\n      this.tagsViewList = [];\n      this.tagsViewRoutesList.map((v) => {\n        if (v.meta.isAffix && !v.meta.isHide) this.tagsViewList.push({...v});\n      });\n      this.addTagsView(path);\n    },\n    // 4、关闭全部 tagsView：如果是设置了固定的（isAffix），不进行关闭\n    closeAllTagsView(path) {\n      this.tagsViewList = [];\n      this.tagsViewRoutesList.map((v) => {\n        if (v.meta.isAffix && !v.meta.isHide) {\n          this.tagsViewList.push({...v});\n          if (this.tagsViewList.some((v) => v.path === path)) this.$router.push({path, query: this.$route.query});\n          else this.$router.push({path: v.path, query: this.$route.query});\n        }\n      });\n      this.addBrowserSetSession(this.tagsViewList);\n    },\n    // 监听未从tagsViewList中去除的已删除路由\n    clearTagsView() {\n      this.tagsViewList.forEach(t => {\n        if (!(this.tagsViewRoutesList.some(tr => tr.path === t.path))) {\n          this.closeCurrentTagsView(t.path)\n        }\n      })\n    }\n  },\n  watch: {\n    // 监听路由变化\n    $route: {\n      handler(to) {\n        this.tagsRoutePath = to.path;\n        this.tagsViewRoutesList = this.$store.state.tagsViewRoutes.tagsViewRoutes;\n        this.clearTagsView()\n        this.addTagsView(to.path, to);\n        this.getTagsRefsIndex(to.path);\n        this.tagsViewmoveToCurrentTag();\n      },\n      deep: true,\n    },\n  },\n  destroyed() {\n    // 取消非本页面调用监听（fun/tagsView）\n    this.bus.$off('onCurrentContextmenuClick');\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.layout-navbars-tagsview {\n  flex: 1;\n  background-color: var(--prev-bg-white);\n  border-bottom: 1px solid var(--prev-border-color-lighter);\n\n  & ::v-deep .is-vertical {\n    display: none !important;\n  }\n\n  &-ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 34px;\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    color: var(--prev-color-text-regular);\n    font-size: 12px;\n    padding: 0 15px;\n\n    &-li {\n      height: 26px;\n      line-height: 26px;\n      display: flex;\n      align-items: center;\n      border: 1px solid var(--prev-border-color-lighter);\n      padding: 0 12px 0 15px;\n      margin-right: 5px;\n      border-radius: 2px;\n      position: relative;\n      z-index: 0;\n      cursor: pointer;\n      justify-content: space-between;\n      transition: all 0.3s cubic-bezier(0.2, 1, 0.3, 1);\n\n      &::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        background: var(--prev-color-primary);\n        z-index: -1;\n        opacity: 0;\n        transform: scale3d(0.7, 1, 1);\n        transition: transform 0.3s, opacity 0.3s;\n        transition-timing-function: cubic-bezier(0.2, 1, 0.3, 1);\n      }\n\n      &:hover {\n        color: var(--prev-color-text-white);\n        transition: all 0.3s cubic-bezier(0.2, 1, 0.3, 1);\n        border-color: transparent;\n\n        &::before {\n          opacity: 1;\n          transform: translate3d(0, 0, 0);\n          border-radius: 2px;\n        }\n\n        .is-tagsview-icon {\n          color: var(--prev-color-text-white);\n          transition: all 0.3s cubic-bezier(0.2, 1, 0.3, 1);\n        }\n      }\n\n      &-iconfont {\n        position: relative;\n        left: -5px;\n        top: 1px;\n        color: var(--prev-color-text-white);\n      }\n\n      &-icon {\n        border-radius: 100%;\n        position: relative;\n        height: 14px;\n        width: 14px;\n        text-align: center;\n        line-height: 14px;\n        top: 1px;\n      }\n\n      .is-tagsview-icon {\n        color: var(--prev-color-text-regular);\n        transition: all 0.3s cubic-bezier(0.2, 1, 0.3, 1);\n      }\n    }\n\n    .is-active {\n      color: var(--prev-color-text-white);\n      transition: all 0.3s cubic-bezier(0.2, 1, 0.3, 1);\n      border-color: transparent;\n\n      &::before {\n        opacity: 1;\n        transform: translate3d(0, 0, 0);\n        border-radius: 2px;\n      }\n    }\n  }\n\n  & ::-webkit-scrollbar {\n    display: none !important;\n  }\n\n  // // 风格2\n  // .tags-style-two {\n  // }\n  // // 风格3\n  // .tags-style-three {\n  // }\n  // // 风格4\n  // .tags-style-four {\n  // }\n}\n</style>\n"]}]}