package ${packageName}.controller;

import java.util.List;
import javax.servlet.http.HttpServletResponse;

import javax.annotation.Resource;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.web.bind.annotation.*;
import com.zhedian.common.annotation.LogOperation;
import com.zhedian.common.domain.CommonResult;
import com.zhedian.common.domain.ResultPage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import ${packageName}.entity.${ClassName};
import ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@Api(tags = "${functionName}管理")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller {

    @Resource
    private I${ClassName}Service ${className}Service;


    @ApiOperation("获取${functionName}")
    @RequestMapping(value = "/get", method = RequestMethod.GET)
    public CommonResult<ResultPage<${ClassName}>> get${ClassName}(@RequestParam Integer pageSize,
                                                          @RequestParam Integer pageNum) {
        Page<${ClassName}> page = new Page<>(pageNum, pageSize);
        //条件构造器
        LambdaQueryWrapper<${ClassName}> queryWrapper = new LambdaQueryWrapper<>();
        //分页查询
        Page<${ClassName}> ${ClassName}Page = ${className}Service.page(page, queryWrapper);
        return CommonResult.success(ResultPage.restPage(${ClassName}Page));
    }


    @ApiOperation("新增${functionName}")
    @LogOperation("新增${functionName}")
    @RequestMapping(value = "/add", method = RequestMethod.POST)
    public CommonResult add${ClassName}(@RequestBody ${ClassName} ${className}) {
        //保存
        if (${className}Service.save(${className})) {
            return CommonResult.success("添加成功");
        }
        return CommonResult.failed("添加失败");
    }


    @ApiOperation("修改${functionName}")
    @LogOperation("修改${functionName}")
    @RequestMapping(value = "/update", method = RequestMethod.PUT)
    public CommonResult update${ClassName}(@RequestBody ${ClassName} ${className}) {
        //修改
        if (${className}Service.updateById(${className})) {
            return CommonResult.success("修改成功");
        }
        return CommonResult.failed("修改失败");
    }

    @ApiOperation("删除${functionName}")
    @LogOperation("删除${functionName}")
    @RequestMapping(value = "/delete/{${pkColumn.javaField}}", method = RequestMethod.DELETE)
    public CommonResult delete${ClassName}(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return CommonResult.success(${className}Service.removeById(${pkColumn.javaField}));
    }
}
